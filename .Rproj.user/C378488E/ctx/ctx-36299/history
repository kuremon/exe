paste(x[[1]][[2]],collapse=internal.sep)
}
lapply(x,get_name.component,"-")
create_naming=function(...,by.folder=TRUE,sep.global=ifelse(by.folder,"/","_"),internal.sep.global="-"){
select=list(...)
naming=function(template.row,sep=sep.global,internal.sep=internal.sep.global){
select=intersect(select,names(template.row))
name.list=lapply(template.row[select],get_name.component,internal.sep)
return(name.list)
if(length(sep)>1){
if(length(name.list)<=length(sep)){
warning("There are too many separators.")
sep=sep[seq(length(name.list)-1)]
}
sep=c(sep,"")
name.list=paste(head(matrix(rbind(name.list,sep),ncol=1),-1),collapse="")
}else{
name.list=paste(name.list,collapse=sep)
}
name.list
}
if(length(args)==0){
b=as.list(body(naming))
body(naming)=as.call(insert(b,list(quote(select<-names(template.row))),2))
}
naming
}
naming=create_naming(c("Site","Smthg"))
naming(x)
source('~/R&D/R packages/Source packages/exe/R/naming.R', echo=TRUE)
naming=create_naming(c("Site","Smthg"))
naming(x)
names(x)
naming=create_naming("Site","Smthg")
naming(x)
source('~/R&D/R packages/Source packages/exe/R/naming.R', echo=TRUE)
naming=create_naming("Site","Smthg")
naming(x)
list("Paris","2004",NULL)
x=list("Paris","2004",NULL)
Filter(is.null,x)
Filter(Negate(is.null),x)
source('~/R&D/R packages/Source packages/exe/R/naming.R', echo=TRUE)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.is(Smthg,list(NULL)))
x
source('~/R&D/R packages/Source packages/exe/R/naming.R', echo=TRUE)
source('~/R&D/R packages/Source packages/exe/R/when.R', echo=TRUE)
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
x
naming.folder=create_naming("Site","Season")
create_naming=function(...,by.folder=TRUE,sep.global=ifelse(by.folder,"/","_"),internal.sep.global="-"){
select=list(...)
naming=function(template.row,sep=sep.global,internal.sep=internal.sep.global){
select=intersect(select,names(template.row))
name.list=lapply(template.row[select],get_name.component,internal.sep)
name.list=Filter(Negate(is.null),x)
if(length(sep)>1){
if(length(name.list)<=length(sep)){
warning("There are too many separators.")
sep=sep[seq(length(name.list)-1)]
}
sep=c(sep,"")
name.list=paste(head(matrix(rbind(name.list,sep),ncol=1),-1),collapse="")
}else{
name.list=paste(name.list,collapse=sep)
}
name.list
}
if(length(args)==0){
b=as.list(body(naming))
body(naming)=as.call(insert(b,list(quote(select<-names(template.row))),2))
}
naming
}
naming.folder=create_naming("Site","Season")
naming.folder
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
source('~/R&D/R packages/Source packages/exe/R/naming.R', echo=TRUE)
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
x
default.naming(x)
source('~/R&D/R packages/Source packages/exe/R/naming.R', echo=TRUE)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
get_name.component
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
get_name.component=function(x,internal.sep){
if(is.null(x[[1]])) return(NULL)
paste(x[[1]][[2]],collapse=internal.sep)
}
get_name.component(x)
name.list=lapply(tx,get_name.component,internal.sep="-")
name.list=lapply(x,get_name.component,internal.sep="-")
name.list
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
source('~/.active-rstudio-document', echo=TRUE)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
remove.packages("porgera2")
source('~/R&D/R packages/Source packages/exe/R/naming.R', echo=TRUE)
remove.packages("porgera2")
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
library(exe)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
default.naming(x)
default.naming=create_naming()
default.naming(x)
library(exe)
default.naming(x)
default.naming(x)
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,"summer"),.is(Person,list(NULL)))
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
default.naming(x)
x
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,list("summer","winter")),.is(Person,list(NULL)))
x
x=data.frame(.is(Site,"Paris"),.is(Year,2004),.in(Season,list(c("summer","winter"))),.is(Person,list(NULL)))
x
naming.folder=create_naming("Site","Season")
naming.folder(x)
naming.underscore=create_naming("Site","Season",sep.global="_")
naming.underscore(x)
default.naming(x)
subset2(mtcars,cyl=list(`==`,4))
library(exe)
subset2(mtcars,cyl=list(`==`,4))
subset2(mtcars,mpg=list(`<`,30),cyl=list(`%in%`,c(4,6)))
iri
iris
within(Petal.Width,c(0.2,0.3))
.within(Petal.Width,c(0.2,0.3))
.within(Petal.Width,list(c(0.2,0.3)))
.is(as.factor(Species),1)
subset2(iris,.within(Petal.Width,list(c(0.2,0.3))),.is(as.factor(Species),1))
.is(Sepal.Length,list(NULL))
cond=cbind(.within(Petal.Width,list(c(0.2,0.3))),.is(as.factor(Species),1))
cond
cond[1,1]
cond["Petal.Width"]
cond["Petal.Width"][1]
cond[1,"Petal.Width"]
cond[1,"Petal.Width"][[1]]
cond[["Petal.Width"]]
cond[["Petal.Width"]][[1]]
cond$Petal.Width
cond$Petal.Width[[1]]
cond$Petal.Width[[1]][[1]]
cond[[1]][[1]]
cond[[1]][[1]][[1]]
cond[[1,1]][[1]][[1]]
cond[[1,1]][[1]]
cond[[1,1]]
cond[1,1]
cond[[1,1]]
cond[[1,1]][[1]]
do.call(cond[[1,1]][[1]],substitute(names(cond[1]),iris))
names(cond[1])
substitute(names(cond[1]),iris))
substitute(expression(names(cond[1])),iris)
substitute(as.expression(names(cond[1])),iris)
substitute(as.call(names(cond[1])),iris)
eval(as.call(names(cond[1])),iris)
as.call(names(cond[1]))
as.call(names(cond[1])
)
w=as.call(names(cond[1]))
w=as.expression(names(cond[1]))
w
w=as.name(names(cond[1]))
w
w
w
eval(w,iris)
w=as.name(names(cond[2]))
w
eval(w,iris)
w=as.name(names(cond[[2]]))
w
eval(w,iris)
w=names(cond[[2]])
w
as.expression(w)
quote(w)
w=parse(names(cond[[2]]))
w
w=parse(names(cond[[2]]))
w=parse(names(cond[2]))
eval(parse(names(cond[2])),iris)
eval(parse(text=names(cond[2])),iris)
eval(parse(text=names(cond[1])),iris)
do.call(cond[[1,1]][[1]],eval(parse(text=names(cond[1])),iris)
)
cond[[1,1]][[1]]
cond[[1,1]][[2]]
do.call(cond[[1,1]][[1]],eval(parse(text=names(cond[1])),iris),cond[[1,1]][[2]])
do.call(cond[[1,1]][[1]],list(eval(parse(text=names(cond[1])),iris),cond[[1,1]][[2]]))
cond
cond2=cbind(cond,.is(Sepal.Length,list(NULL)))
cond2
cond2=cond2[3]
cond2
do.call(cond2[[1,1]][[1]],list(eval(parse(text=names(cond2[1])),iris),cond2[[1,1]][[2]]))
values=cond[[1,1]][[2]]
values
values=cond[[1,1]][[2]]
values=cond2[[1,1]][[2]]
values2
values
?and
?AND
?$
?&
??&
x <- c(NA, FALSE, TRUE)
names(x) <- as.character(x)
outer(x, x, "&")
x&x
x&rep(T,0)
Reduce_operator(&)(c(T,T),(T,F),c(T,T))
fun=Reduce_operator(&)
fun=Reduce_operator("&")
library("recurs", lib.loc="C:/Users/cbonini/Documents/R/win-library/3.0")
Reduce_operator(&)(c(T,T),(T,F),c(T,T))
fun=Reduce_operator("&")
fun(c(T,T),(T,F),c(T,T))
fun(c(T,T),c(T,F),c(T,T))
fun(c(T,T),c(T,F),c(F,T))
Reduce_operator(&)(c(T,T),c(T,F),c(T,T))
Reduce_operator("&")(c(T,T),c(T,F),c(T,T))
cond
cond=as.list(cond)
cond
cond[[1]]
cond1=cond[[1]]
cond=cond1
operator=cond[[1,1]][[1]]
cond=cbind(.within(Petal.Width,list(c(0.2,0.3))),.is(as.factor(Species),1))
cond=as.list(cond)[[1]]
cond
cond[[1]]
cond[[1]][[1]]
names(cond)
cond[1][[1]]
cond[[1]][1]
operator=cond[[1]][[1]]
values=cond[[1]][[2]]
operator
values
find.index=function(data,cond){
operator=cond[[1]][[1]]
values=cond[[1]][[2]]
expr=names(cond[1])
if(is.null(values)) return(rep(TRUE,nrow(data)))
do.call(operator,list(eval(parse(text=expr),data),values))
}
find.index(iris,cond)
subset3=function(data,cond){
cond=as.list(cond)
idxs=lapply(cond,find.index,data=data)
idx=do.call(Reduce_operator("&"),idxs)
data[idx,]
}
find.index=function(cond,data){
cond=as.list(cond)
operator=cond[[1]][[1]]
values=cond[[1]][[2]]
expr=names(cond[1])
if(is.null(values)) return(rep(TRUE,nrow(data)))
do.call(operator,list(eval(parse(text=expr),data),values))
}
cond=cbind(.within(Petal.Width,list(c(0.2,0.3))),.is(as.factor(Species),1))
subset3(iris,cond)
cond
data=iris
cond=as.list(cond)
idxs=lapply(cond,find.index,data=data)
idxs
idx=do.call(Reduce_operator("&"),idxs)
idx
find.index(as.list(cond)[[2]],data)
cond=as.list(cond)[[2]]
cond
cond=as.list(cond)
operator=cond[[1]][[1]]
values=cond[[1]][[2]]
expr=names(cond[1])
expr
values=cond[[1]][[2]]
operator=cond[[1]][[1]]
values
operator
do.call(operator,list(eval(parse(text=expr),data),values))
subset(irirs,as.factor(Species)==1)
subset(iris,as.factor(Species)==1)
subset(iris,as.numeric(as.factor(Species))==1)
cond=cbind(.within(Petal.Width,list(c(0.2,0.3))),.is(as.numeric(as.factor(Species)),1))
cond
subset3(iris,cond)
iris
cond1=cbind(cond,.is(Group,"flower"))
cond1
subset3(iris,cond1)
eval(parse(text="Group"),iris)
eval(parse(text="Group"),iris)tryCatch(stop("fred"), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"),silent=T)
tryCatch(stop("fred"),  error = function(e) e, finally = print("Hello"))
tryCatch(1+1,  error = function(e) e, finally = print("Hello"))
tryCatch(1+1,  error = function(e) e)
w=tryCatch(1+1,  error = function(e) e)
w
w=tryCatch(1+1,  error = function(e) seq(1:10))
w
w=tryCatch(stop('we'),  error = function(e) seq(1:10))
w
source('~/.active-rstudio-document', echo=TRUE)
subset3(iris,cond1)
cond1
find.index=function(cond,data){
cond=as.list(cond)
operator=cond[[1]][[1]]
values=cond[[1]][[2]]
expr=names(cond[1])
#f(is.null(values)) return()
tryCatch(do.call(operator,list(eval(parse(text=expr),data),values)),
error = function(e) rep(TRUE,nrow(data)))
}
subset3(iris,cond1)
cond2=cbind(cond,.is(Sepal.Length,list(NULL)))
subset3(iris,cond2)
find.index=function(cond,data){
cond=as.list(cond)
operator=cond[[1]][[1]]
values=cond[[1]][[2]]
expr=names(cond[1])
#f(is.null(values)) return()
return(do.call(operator,list(eval(parse(text=expr),data),values)))
tryCatch(do.call(operator,list(eval(parse(text=expr),data),values)),
error = function(e) rep(TRUE,nrow(data)))
}
subset3(iris,cond2)
conc2
cond2
a=we==45
subset3i=function(data,...){
args=substitute(list(...))
return(args)
args.new=lapply(args,function(arg){
arg=as.list(arg)
list(eval(arg[[1]]),eval(arg[[3]]))
})
names(args.new)=lapply(args,function(arg)deparse(arg[[2]]))
do.call(subset2,c(list(data=data),args.new))
}
subset3i(mtcars,cyl%in%c(4,6),am==1,vs==0)
a=subset3i(mtcars,cyl%in%c(4,6),am==1,vs==0)
a
a[[1]]
a[[2]]
a[[3]]
a[[4]]
w=a[[4]]
subset3i=function(data,...){
args=substitute(...)
return(args)
args.new=lapply(args,function(arg){
arg=as.list(arg)
list(eval(arg[[1]]),eval(arg[[3]]))
})
names(args.new)=lapply(args,function(arg)deparse(arg[[2]]))
do.call(subset2,c(list(data=data),args.new))
}
a=subset3i(mtcars,cyl%in%c(4,6),am==1,vs==0)
a
a
subset3i=function(data,...){
args=list(...)
return(args)
args.new=lapply(args,function(arg){
arg=as.list(arg)
list(eval(arg[[1]]),eval(arg[[3]]))
})
names(args.new)=lapply(args,function(arg)deparse(arg[[2]]))
do.call(subset2,c(list(data=data),args.new))
}
a=subset3i(mtcars,cyl%in%c(4,6),am==1,vs==0)
subset3i=function(data,...){
args=quote(list(...))
return(args)
args.new=lapply(args,function(arg){
arg=as.list(arg)
list(eval(arg[[1]]),eval(arg[[3]]))
})
names(args.new)=lapply(args,function(arg)deparse(arg[[2]]))
do.call(subset2,c(list(data=data),args.new))
}
a=subset3i(mtcars,cyl%in%c(4,6),am==1,vs==0)
a
subset3i=function(data,...){
args=subtitute(list(...))
return(args)
args.new=lapply(args,function(arg){
arg=as.list(arg)
list(eval(arg[[1]]),eval(arg[[3]]))
})
names(args.new)=lapply(args,function(arg)deparse(arg[[2]]))
do.call(subset2,c(list(data=data),args.new))
}
a=subset3i(mtcars,cyl%in%c(4,6),am==1,vs==0)
subset3i=function(data,...){
args=substitute(list(...))
return(args)
args.new=lapply(args,function(arg){
arg=as.list(arg)
list(eval(arg[[1]]),eval(arg[[3]]))
})
names(args.new)=lapply(args,function(arg)deparse(arg[[2]]))
do.call(subset2,c(list(data=data),args.new))
}
a=subset3i(mtcars,cyl%in%c(4,6),am==1,vs==0)
a
a[[1]]
a[-1]
a[1]
a[0]
a[2]
a[3]
a[4]
a[[4]]
eval(a[[4]],data)
eval(a[[4]],mtcars)
as.list(a)
as.list(a)[-1]
w=as.list(a)[-1]
w
w[[1]]
class(w[[1]])
mode(w[[1]])
typeof(w[[1]])
find.index=function(call,data){
tryCatch(eval(call,data),error = function(e) rep(TRUE,nrow(data)))
}
subset3.base=function(data,call.list){
idxs=lapply(call.list,find.index,data=data)
idx=do.call(Reduce_operator("&"),idxs)
data[idx,]
}
w
subset3.base(mtcars,w)
subset3i=function(data,...){
exprs=as.list(substitute(list(...)))[-1]
subset3.base(data,exprs)
}
