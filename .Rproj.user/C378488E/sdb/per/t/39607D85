{
    "contents" : "#' @title Operators to create a template\n#' @rdname template_operators\n#' @export\n`%cb%` <- function(x,y){\n  if(is.null(y)) return(x)\n  if(is.null(x)) return(y)\n  \n  if(length.template(x)!=length.template(y)) stop(\"Templates x and y don't have the same number of rows.\")\n  #if(is.data.frame(x)&&is.data.frame(y)) return(cbind(x,y)) #PROBLEM WITH ACTION\n  list(op=\"cbind\",x=x,y=y)\n}\n\n#' @rdname template_operators\n#' @export\n`%rb%` <- function(x,y){\n  if(is.null(y)) return(x)\n  if(is.null(x)) return(y)\n  if(length.template(x)==0) return(y)\n  if(length.template(y)==0) return(x)\n  list(op=\"rbind.fill\",x=x,y=y)\n}\n\n#' @rdname template_operators\n#' @export\n`%ex%` <- function(x,y){\n  if(is.null(y)) return(x)\n  if(is.null(x)) return(y)\n  list(op=\"expand.mgrid\",x=x,y=y)\n}\n\n#' @title View template in full format\n#' @export\nfull.format=function(template){\n  if(is.action(template)||is.param(template)) template=as.composite(template)                              \n  if(is.basic.template(template)) return(format(template))\n  do.call(template$op,list(full.format(template$x),full.format(template$y)))\n}\n\n#' @title Get template length\n#' @export\nlength.template=function(template){\n  if(is.basic.template(template)) return(nrow(template))\n  x=template$x\n  y=template$y\n  switch(template$op,\n       cbind=length.template(x),\n       rbind.fill=length.template(x)+length.template(y),\n       expand.mgrid=length.template(x)*length.template(y))\n}\n\n#' @title Extract part of a template\n#' @param template A recursive template\n#' @param int a signle integer or an interval of the form \\code{c(n,m)}. \n#' @export\nextract.from.template=function(template,int){\n  if(length(int)==0) return(data.frame(NULL))\n  if(is.basic.template(template)) return(template[seq(min(int),max(int)),,drop=FALSE])\n  op=template$op\n  x=template$x\n  y=template$y\n  \n  if(op==\"cbind\") return(extract.from.template(x,int)%cb%extract.from.template(y,int))\n  if(op==\"rbind.fill\"){\n    l.x=length.template(x)\n    if(max(int)<=l.x) return(extract.from.template(x,int))\n    if(l.x<min(int)) return(extract.from.template(y,int-l.x))\n    return(extract.from.template(x,c(min(int),l.x))%rb%extract.from.template(y,c(1,max(int)-l.x)))\n  }\n  if(op==\"expand.mgrid\"){\n    l.y=length.template(y)\n    n.x.start=(min(int)-1)%/%l.y+1\n    n.y.start=(min(int)-1)%%l.y+1\n    n.x.end=(max(int)-1)%/%l.y+1\n    n.y.end=(max(int)-1)%%l.y+1\n    \n    if(n.x.start==n.x.end){\n      return(extract.from.template(x,n.x.start)%ex%extract.from.template(y,c(n.y.start,n.y.end)))\n    }else{\n      temp.start=extract.from.template(x,n.x.start)%ex%extract.from.template(y,c(n.y.start,l.y))\n      temp.end=extract.from.template(x,n.x.end)%ex%extract.from.template(y,c(1,n.y.end))\n      \n      if((n.x.end-n.x.start)==1){ \n        return(temp.start%rb%temp.end)\n      }else{\n        return(temp.start%rb%(extract.from.template(x,c(n.x.start+1,n.x.end-1))%ex%y)%rb%temp.end)\n      }\n    }\n  }\n}",
    "created" : 1382329871810.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "650773288",
    "id" : "39607D85",
    "lastKnownWriteTime" : 1382576871,
    "path" : "~/R&D/R packages/Source packages/exe/R/toolbox_template.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}